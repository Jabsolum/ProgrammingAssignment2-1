x[1,1]
x[10,10]
x$name
x[10,10] <-t
names(x)
x <- matrix(1:100, ,3)
x
x <- matrix(1:100, ,4)
colnames('a, "b', "c", 'd')
colnames('a', "b", "c", 'd')
colnames("a", "b", "c", "d")
col <- c("a", "b", "c", "d")
colnames(x) <- col
x
names(x)
get()
x$get()
xget
get(x)
get("x")
x
y <- 1
y
y$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makevector(3)
makeVector(4)
x
makeVector(10)
makeVector()
x <- c(rnorm(10), runif(10), rnorm(10,1))
x
f <- gl(3, 10)
f
library(datasets)
airquality
head(airquality)
x <-
sulfatecol <- file_nona[ ,2]x
s <- split(airquality, airquality$Month)
s
library(datasets)
data("iris")
iris
?iris
colMeans(iris)
apply(iris,2, mean)
apply(iris[ ,1:4],2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(209.21429 - 82.63636)
ls
debug(ls)
ls(x)
ls
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
ls()
4
2
?iris
x <- mean
data("iris")
exit
4
7
library(datasets)
data("iris")
?iris
x <- mean(iris, iris$Sepal.Length)
x <- mean(iris[iris$Sepal.Length])
x <- mean(iris[ ,iris$Sepal.Length])
x <- mean(iris[ ,2])
x
?iris
mean(iris[ ,2])
iris
split(iris,"virginica")
split(iris,"virginica")
split(iris, iris$Species)
sapply(split(iris, iris$Species), mean)
lapply(split(iris, iris$Species), mean)
mapply(split(iris, iris$Species), mean)
mapply(mean, split(iris, iris$Species))
colMeans(split(iris, iris$Species), 2, mean)
colMeans(iris, 2, mean)
iris
tapply(split(iris, iris$Species), 1, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
abs(209.21429 - 82.63636)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(3)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(4)
cachemean()
x <- 1:4
x
makeVector(x)
cachemean(x)
makeVector(1:15)
x <- 1:15
x
getwd()
setwd(""C:/Users/jabso/Documents/Coursera")
setwd("C:/Users/jabso/Documents/Coursera")
setwd("C:/Users/jabso/Coursera/ProgrammingAssignment2-1")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
myVector <- MakeVector(1:15)
myVector <- makeVector(1:15)
myVector
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
myVector$get()
myVector$getmean()
myVector$set(1:10)
myVector$getmean()
cachemean(myVector)
myVector$getmean()
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
j <- matrix(1:100)
j
x <- matrix(1:100)
myMatrix <- makeCacheMatrix(x)
myMatrix
cacheSolve(myMatrix)
myMatrix
n
cacheSolve(myMatrix)
x <- matrix(1:1000,10,5)
myMatrix <- makeCacheMatrix(x)
cacheSolve(myMatrix)
x
x <- matrix(1:1000,10,10)
x
myMatrix <- makeCacheMatrix(x)
cacheSolve(myMatrix)
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
x
myMatrix <- makeCacheMatrix(x)
cacheSolve(myMatrix)
myMatrix
myVector
cachemean
cachemean(myVector)
x$getinverse(myMatrix)
myMatrix <- makeCacheMatrix(x)
x
x$getinverse(myMatrix)
myMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
myMatrix <- makeCacheMatrix(x)
myMatrix
x$getinverse(myMatrix)
j <- nummeric(1:10)
j <- numeric(1:10)
j <- numeric()
j
j <- matrix()
j
tget <- function() x
tget
tinverse <- function(solve)
)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinverse <- function(solve) s <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setinverse(s)
s
## Return a matrix that is the inverse of 'x'
}
myMatrix <- makeCacheMatrix(x)
myMatrix
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinverse <- function(solve) s <<- solve
getinverse <- function() s
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setinverse(s)
s
## Return a matrix that is the inverse of 'x'
}
myMatrix <- makeCacheMatrix(x)
myMatrix
solve(x)
cacheSolve <- function(x, ...) {
print(x)
m <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setinverse(s)
s
## Return a matrix that is the inverse of 'x'
}
solve(x)
myMatrix <- makeCacheMatrix(x)
cacheSolve()
cacheSolve(myMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinverse <- function(solve) s <<- solve
getinverse <- function() s
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
print(x)
m <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setinverse(s)
s
## Return a matrix that is the inverse of 'x'
}
myMatrix <- makeCacheMatrix(x)
cacheSolve(myMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y) {
x <<- y
s <<- NULL
}
get <- function() x
setinverse <- function(solve) s <<- solve
getinverse <- function() s
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
print(x)
s <- x$getinverse()
if(!is.null(s)) {
message("getting cached data")
return(s)
}
data <- x$get()
s <- solve(data)
x$setinverse(s)
s
## Return a matrix that is the inverse of 'x'
}
myMatrix <- makeCacheMatrix(x)
cacheSolve(myMatrix)
solve(x)
x <- matrix(1:1000,2,3)
x <- matrix(1:100,2,3)
x <- matrix(1:100,2,4)
solve(x)
x <- matrix(1:100,2,2)
solve(x)
myMatrix <- makeCacheMatrix(x)
cacheSolve(myMatrix)
x
cacheSolve(myMatrix)
x
myMatrix$getinverse
myMatrix$get
myMatrix$get()
myMatrix$getinverse()
myMatrix$set(1:100,2,2)
MyMatrix$set()
myMatrix$set()
myMatrix$set(1:100)
myMatrix$getinverse()
cacheSolve(myMatrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
s <- NULL
set <- function(y, ) {
x <<- y
s <<- NULL
}
get <- function() x
setinverse <- function(solve) s <<- solve
getinverse <- function() s
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
myMatrix$set(1:100,4)
myMatrix$getinverse()
x <- matrix(1:1000, 3, 3)
x <- matrix(1:900, 3, 3)
solve(x)
x <- matrix(1:100, 4, 4)
solve(x)
x
x <- matrix(1:9, 3, 3)
x
solve(x)
x <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
myMatrix <- makeCacheMatrix(x)
cacheSolve(myMatrix)
cacheSolve(myMatrix)
